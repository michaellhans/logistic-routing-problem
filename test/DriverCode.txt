# Driver for Point
P1 = Point(2,4)
P2 = Point(4,8)
P3 = Point(6,4)
P4 = Point(2,-2)
P5 = Point(0,0)
P6 = Point(6,0)
P7 = Point(12,8)
P8 = Point(10,6)
P9 = Point(10,2)
P10 = Point(8,2)
P11 = Point(9,-1)
print(P6.distanceTo(P10))
print(P3.distanceTo(P10))
print(P9.distanceTo(P11))
print(P10.distanceTo(P11))
print(P10.distanceTo(P9))
print(P10.distanceTo(P8))
print(P8.distanceTo(P9))
print(P8.distanceTo(P2))
print(P8.distanceTo(P7))
print(P7.distanceTo(P9))
print(P2.distanceTo(P7))

# Driver for Dijkstra
Graph = [[np.inf, 4, np.inf, np.inf, np.inf, np.inf, np.inf, 8, np.inf], 
        [4, np.inf, 8, np.inf, np.inf, np.inf, np.inf, 11, np.inf], 
        [np.inf, 8, np.inf, 7, np.inf, 4, np.inf, np.inf, 2], 
        [np.inf, np.inf, 7, np.inf, 9, 14, np.inf, np.inf, np.inf], 
        [np.inf, np.inf, np.inf, 9, np.inf, 10, np.inf, np.inf, np.inf], 
        [np.inf, np.inf, 4, 14, 10, np.inf, 2, np.inf, np.inf], 
        [np.inf, np.inf, np.inf, np.inf, np.inf, 2, np.inf, 1, 6], 
        [8, 11, np.inf, np.inf, np.inf, np.inf, 1, np.inf, 7], 
        [np.inf, np.inf, 2, np.inf, np.inf, np.inf, 6, 7, np.inf] 
        ]; 

Origin = 0
Solution, parent = dijkstra(Graph, 0, 9)
printSolution(Solution, parent)

# # Main Program or Driver for Multiple TSP with Ant-Colony Optimization
# maps = {}
# isSuccess = False
# while (not(isSuccess)):
#     try:
#         fileNode = input("Masukkan nama file koordinat\t: ")
#         fileEdge = input("Masukkan nama file jalanan\t: ")
#         maps = LoadCoordinate(fileNode)
#         streets = LoadStreet(fileEdge)
#         numOfCities = len(maps)
#         isSuccess = True
#     except IndexError:
#         print("Terjadi kesalahan dalam pembacaan file!")
#         print("Harap masukkan file yang valid dengan format yang benar.")
#     except FileNotFoundError:
#         print("File tidak ditemukan!")

# numOfSalesman = int(input("Masukkan jumlah salesman\t: "))
# originCity = int(input("Masukkan kota depot / asal\t: "))

# # Quick test for quick debugging
# fileNode = "OL.cnode.txt"
# fileEdge = "OL.cedge.txt"
# numOfSalesman = 2
# maps = LoadCoordinate(fileNode)
# streets = LoadStreet(fileEdge)
# boolStreets = GetBooleanStreets(streets)

# # Print all information about maps coordinate and streets
# PrintCoordinateInfo(maps)
# PrintStreetInfo(streets)

# # Visualize the initial Map
# VisualizeComplexGraph(0, streets, [], maps, numOfCities)

# # Create distance matrix based on the streets information
# MBase = ConvertStreetsIntoGraph(streets, numOfCities)
# PrintMatrix(MBase, numOfCities)

# # Execute ten iterations to get the best route for all salesman
# for j in range(10):
#     ListOfMSub = []
#     ListOfSubCities = []
#     ListOfSubCities = CitiesIntoSubCities(numOfCities, numOfSalesman, originCity)
#     print(ListOfSubCities)
#     ListOfMSub = CreateAllSubGraphs(MBase, ListOfSubCities, numOfCities)
#     routes = []
#     solution = []

#     # Execute numOfSalesman TSP process and return numOfSalesman route
#     for i in range(numOfSalesman):
#         ant_colony = AntColony(np.array(ListOfMSub[i]), 1, 1, 100, 0.95, alpha=1, beta=1)
#         shortest_path = ant_colony.run()
#         print ("Shortest path: {}".format(shortest_path))
#         if (shortest_path[0] != 'placeholder'):
#             routeParent = ConvertIntoRoute(shortest_path)
#             ValidizeRoute(routeParent, ListOfSubCities[i])
#             print("Jarak tempuh untuk sales ke-"+str(i+1)+" adalah "+str(shortest_path[1])+" km")
#             print("Rute perjalanan untuk sales ke-"+str(i+1)+" adalah ", end="")
#             PrintRoute(routeParent)
#             routes.append(routeParent)
#             solution.append([routeParent, shortest_path[1]])
#         else:
#             print("Tidak terdapat rute yang memungkinkan untuk sales ke-"+str(i+1))
#             solution.append([[0], -999])
#         input()

#     # Print all solution route for every salesman and their total distance
#     PrintAllSolution(solution, numOfSalesman)

#     # Visualize the route for every salesman
#     VisualizeComplexGraph(shortest_path[0][0][0], streets, routes, maps, numOfCities)